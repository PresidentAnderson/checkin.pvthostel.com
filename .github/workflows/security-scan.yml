name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM UTC
  workflow_dispatch:
  push:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'imarkethr'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
        
    - name: Upload OWASP results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: reports/

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: imarkethr:scan
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: imarkethr:scan
        fail-build: false
        severity-cutoff: high
        
    - name: Upload Grype scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ steps.scan.outputs.sarif }}
        
    - name: Run Syft SBOM generator
      uses: anchore/sbom-action@v0
      with:
        image: imarkethr:scan
        format: spdx-json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom-spdx.json

  license-scan:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install license-checker
      run: npm install -g license-checker
      
    - name: Check licenses
      run: |
        license-checker --production --summary > license-summary.txt
        license-checker --production --json > licenses.json
        
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: |
          license-summary.txt
          licenses.json

  security-audit:
    name: npm Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
        
    - name: Run npm audit
      run: |
        npm audit --production --audit-level=moderate > npm-audit-report.txt || true
        cd client && npm audit --production --audit-level=moderate > ../client-npm-audit-report.txt || true
        
    - name: Run better-npm-audit
      run: |
        npx better-npm-audit audit --production --level moderate
        cd client && npx better-npm-audit audit --production --level moderate
        
    - name: Upload audit reports
      uses: actions/upload-artifact@v4
      with:
        name: npm-audit-reports
        path: |
          npm-audit-report.txt
          client-npm-audit-report.txt

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/nodejs
          p/react
          p/mongodb
          p/jwt
          p/owasp-top-ten
        generateSarif: true
        
    - name: Upload Semgrep results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep.sarif
      if: always()

  infrastructure-scan:
    name: Infrastructure as Code Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        quiet: true
        soft_fail: true
        framework: dockerfile,yaml
        output_format: sarif
        output_file_path: checkov.sarif
        
    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov.sarif

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-check, secrets-scan, container-scan, license-scan, security-audit, sast-scan, infrastructure-scan]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "Date: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Scan Results" >> security-summary.md
        echo "- CodeQL: ${{ needs.codeql-analysis.result }}" >> security-summary.md
        echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> security-summary.md
        echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-summary.md
        echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-summary.md
        echo "- License Scan: ${{ needs.license-scan.result }}" >> security-summary.md
        echo "- Security Audit: ${{ needs.security-audit.result }}" >> security-summary.md
        echo "- SAST Scan: ${{ needs.sast-scan.result }}" >> security-summary.md
        echo "- Infrastructure Scan: ${{ needs.infrastructure-scan.result }}" >> security-summary.md
        
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
        
    - name: Comment PR with security summary
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });